name: Build Release
on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - RelWithDebInfo
        - MinSizeRel
      platform:
        description: 'Platform to build for'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - ubuntu

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        
    - name: Filter by platform
      if: ${{ inputs.platform != 'all' && (inputs.platform == 'windows' && runner.os != 'Windows' || inputs.platform == 'macos' && runner.os != 'macOS' || inputs.platform == 'ubuntu' && runner.os != 'Linux') }}
      run: echo "Skipping job for ${{ runner.os }}" && exit 0

    - name: Install Dependencies
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
          libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

    - name: Install Skia
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          this_dir=$(cygpath "${{ github.workspace }}")
        else
          this_dir="${{ github.workspace }}"
        fi
        skia_url=$(source $this_dir/laf/misc/skia-url.sh | xargs)
        skia_file=$(basename $skia_url)
        curl --ssl-revoke-best-effort -L -o "$skia_file" "$skia_url"
        unzip "$skia_file" -d skia

    - uses: aseprite/get-ninja@main
    - uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'

    - name: Generating Makefiles
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]] ; then
          export skia_arch=arm64
        else
          export skia_arch=x64
        fi

        cmake -S . -B build -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 \
          -DENABLE_TESTS=ON \
          -DENABLE_SCRIPTING=on \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$(realpath skia) \
          -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-$skia_arch)

    - name: Compiling
      shell: bash
      run: |
        cd build && ninja

    - name: Create Release Archive
      shell: bash
      run: |
        cd build
        if [[ "${{ runner.os }}" == "Windows" ]] ; then
          # Create zip archive for Windows
          7z a -tzip aseprite-${{ inputs.build_type }}-${{ runner.os }}.zip bin/
        else
          # Create tar.gz archive for Unix-like systems
          tar -czvf aseprite-${{ inputs.build_type }}-${{ runner.os }}.tar.gz bin/
        fi

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aseprite-${{ inputs.build_type }}-${{ runner.os }}
        path: |
          build/aseprite-${{ inputs.build_type }}-${{ runner.os }}.zip
          build/aseprite-${{ inputs.build_type }}-${{ runner.os }}.tar.gz